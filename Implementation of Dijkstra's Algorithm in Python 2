import heapq

def dijkstra(n, edges, source, target):
    graph = {i: [] for i in range(n)}
    for u, v, w in edges:
        graph[u].append((v, w))

    pq = [(0, source)]
    dist = {i: float('inf') for i in range(n)}
    dist[source] = 0

    while pq:
        d, node = heapq.heappop(pq)
        if node == target:
            return dist[node]
        if d > dist[node]:
            continue
        for neighbor, weight in graph[node]:
            new_dist = d + weight
            if new_dist < dist[neighbor]:
                dist[neighbor] = new_dist
                heapq.heappush(pq, (new_dist, neighbor))

    return float('inf')

# Test Case 1
n = 6
edges = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15), 
         (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source = 0
target = 4
print(dijkstra(n, edges, source, target))  # Output: 20

# Test Case 2
n = 5
edges = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9), (3, 2, 7),
         (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source = 0
target = 3
print(dijkstra(n, edges, source, target))  # Output: 8
